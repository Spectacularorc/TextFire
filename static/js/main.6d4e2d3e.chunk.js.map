{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","type","msg","Navbar","concat","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","placeholder","rows","newText1","showAlert","newText2","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","newText","split","join","length","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6d4e2d3e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/About\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode==='light'?'light':'dark'} bg-${props.mode==='light'?'light':'dark'}`}>\r\n            <div className=\"container-fluid\">\r\n              <div\r\n                className=\"collapse navbar-collapse\"\r\n                id=\"navbarNavDarkDropdown\"\r\n              >\r\n                <ul className=\"navbar-nav\">\r\n                  <li className=\"nav-item dropdown\">\r\n                    <a\r\n                      className=\"nav-link dropdown-toggle\"\r\n                      href=\"/\"\r\n                      role=\"button\"\r\n                      data-bs-toggle=\"dropdown\"\r\n                      aria-expanded=\"false\"\r\n                    >\r\n                      Dropdown\r\n                    </a>\r\n                    <ul className={`dropdown-menu dropdown-menu-${props.mode==='light'?'light':'dark'}`}>\r\n                      <li>\r\n                        <div className=\"form-check form-switch \">\r\n                          <input\r\n                            className=\"form-check-input\" onClick={props.toggleMode}\r\n                            type=\"checkbox\"\r\n                            role=\"switch\"\r\n                            id=\"flexSwitchCheckDefault\"\r\n                          />\r\n                          <label\r\n                            className=\"form-check-label \"\r\n                            htmlFor=\"flexSwitchCheckDefault\"\r\n                          >\r\n                            Dark mode\r\n                          </label>\r\n                        </div>\r\n                      </li>\r\n                    </ul>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About \",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = ()=>{\r\n    console.log(`Uppercase was clicked  ${text}`)\r\n      let newText1 = text.toUpperCase();\r\n      setText(newText1);\r\n      props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  }\r\n\r\n  const handleLoClick = ()=>{\r\n    console.log(`Lowercase was clicked  ${text}`)\r\n      let newText2 = text.toLowerCase();\r\n      setText(newText2);\r\n      props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  }\r\n\r\n  const handleClClick = ()=>{\r\n      let newText3 = '';\r\n      setText(newText3);\r\n      props.showAlert(\"text cleared\", \"success\");\r\n  }\r\n\r\n  const handleOnChange = (event)=>{\r\n    console.log(\"On Change\")\r\n    setText(event.target.value)\r\n  } \r\n\r\n  const handleCopy = ()=>{\r\n    var text = document.getElementById(\"myBox\")\r\n    text.select();\r\n    text.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"copied to clipboard\", \"success\");\r\n  } \r\n\r\n  const handleExtraSpaces = ()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  } \r\n\r\n  const [text, setText] = useState('');\r\n  return (\r\n  <>\r\n   <div className=\"container\" style={{color: props.mode==='dark'?'silver':'#080808'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"floating\">\r\n        <textarea className=\"form-control\" value = {text} onChange = {handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}}  placeholder=\"Enter the text\" id=\"myBox\" rows=\"10\"></textarea>\r\n      </div>\r\n\r\n      <button className=\"btn \r\n      btn-primary my-3\" onClick = {handleUpClick}>Convert to upper case </button>\r\n\r\n      <button className=\"btn \r\n      btn-primary my-3 mx-2\" onClick = {handleLoClick}>Convert to Lower case</button>\r\n\r\n      <button className=\"btn \r\n      btn-primary my-3 mx-2\" onClick = {handleClClick}>Clear text</button>\r\n\r\n      <button className=\"btn \r\n      btn-primary my-3 mx-2\" onClick = {handleCopy}>Copytext</button>\r\n\r\n      <button className=\"btn \r\n      btn-primary my-3 mx-2\" onClick = {handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n   </div>\r\n\r\n   <div className=\"container my-3\" style={{color: props.mode==='dark'?'silver':'#080808'}}>\r\n      <h1>Your text summary</h1>\r\n      <p> {text.split(\" \").length} words and {text.length} characters </p>\r\n      <p>{0.008* text.split(\" \").length} Minuites Read </p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter somthing to Preview it here\"}</p>\r\n   </div>\r\n  </>\r\n  )\r\n}\r\n","import { useState } from \"react\";\n// import { type } from \"@testing-library/user-event/dist/type\";\nimport React from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode enabled or not\n  const [alert, setAlert] = useState(null); \n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    }, 1500)\n  }\n\n const toggleMode =()=>{\n    if(mode=== 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#303030';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else if(mode=== 'dark')\n    {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  \n    else if(mode=== 'dark'|| mode==='light')\n    {\n      setMode('Red');\n      document.body.style.backgroundColor = '#65000B';\n      showAlert(\"Red Mode has been enabled\", \"success\");\n    }\n  }\n  \n  return (\n     <>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n      {/* <Navbar title= \"TextFire\" aboutText= \"About-TextFire\"/> */}\n      {/* <Navbar/> */}\n      {/* <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={ */}\n          <TextForm showAlert={showAlert} heading='Enter Text Here' mode={mode}/>\n          \n        {/* } />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n      </BrowserRouter>\n     */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}